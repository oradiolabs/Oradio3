name: Check Python with Pylint (PEP8)

on: 
  push:
  pull_request:
  workflow_dispatch:

jobs:
  lint:
    name: Run pylint for PEP8 compliance
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y  python3-gi python3-dbus libasound2-dev

    - name: Set up Python virtual environment
      run: |
        python3 -m venv --system-site-packages ~/.venv
        source ~/.venv/bin/activate
        python -m pip install --upgrade pip
        pip install -r .github/workflows/oradio_modules.txt

    - name: Run pylint
      # Disable immediate exit on error
      # Use .pylintrc 
      # Fail on fatal(1) + error(2) + warning(4) + usage(32), continue on refactor(8) and convention(16)
      run: |
        set +e
        source ~/.venv/bin/activate
        pylint $(git ls-files '*.py') \
          --rcfile=.github/workflows/.pylintrc \
          --output=pylint_result.txt
        status=$?
        echo "Raw pylint exit code: $status"
        masked=$((status & 39))
        echo "Masked exit code (fatal, error, warning, usage): $masked"
        exit $masked
      shell: bash

    - name: Write job summary
      if: always()
      run: |

        # Remove ANSI color codes and "************* Module ..." lines
        sed -E 's/\x1B\[[0-9;]*[A-Za-z]//g' pylint_result.txt | grep -v '^\*' > pylint_clean.txt

        # Count the actual pylint issues
        count=$(grep -E "^[^:]+:[0-9]+:[0-9]+: [A-Z][0-9]{4}:" pylint_clean.txt | wc -l | tr -d ' ')

        # Show nr of issues found
        echo "### 🧹 Pylint summary" >> $GITHUB_STEP_SUMMARY
        if [ "$count" -gt 10 ]; then
          echo "⚠️ $count issues found. Please resolve before continueing." >> $GITHUB_STEP_SUMMARY
          echo -e "\n📥 Download **pylint_result.txt** from the **Artifacts** section of this workflow run to review all issues." >> $GITHUB_STEP_SUMMARY

        else
          if [ $count -eq 0 ]; then
            echo "✅ No issues found." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ $count issues found. Please resolve before continueing." >> $GITHUB_STEP_SUMMARY
            echo -e "\n📥 Download the full **pylint_result.txt** from the **Artifacts** section of this workflow run to review all issues." >> $GITHUB_STEP_SUMMARY
          fi
        fi

    - name: Upload pylint result
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: pylint_result.txt
        path: pylint_result.txt
        if-no-files-found: ignore
